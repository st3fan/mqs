#!/usr/bin/env python2.5


import xmlrpclib

from twisted.web import xmlrpc
from twisted.internet import defer


class MiniQueueServiceException(Exception):
    def __init__(self, message):
        self.message = message


class MiniQueueService(object):

    def __init__(self):
        self.queues = {}

    def createQueue(self, queueName):
        if not self.queues.has_key(queueName):
            self.queues[queueName] = []

    def deleteQueue(self, queueName):
        if not self.queues.has_key(queueName):
            raise MiniQueueServiceException("Queue '%s' does not exist" % queueName)
        del self.queues[queueName]

    def listQueues(self):
        return sorted(self.queues.keys())

    def receiveMessage(self, queueName):
        if not self.queues.has_key(queueName):
            raise MiniQueueServiceException("Queue '%s' does not exist" % queueName)
        queue = self.queues[queueName]
        if len(queue):
            return queue.pop()
        else:
            return None
        
    def sendMessage(self, queueName, message):
        if not self.queues.has_key(queueName):
            raise MiniQueueServiceException("Queue '%s' does not exist" % queueName)
        if type(message) not in (str,unicode):
            raise MiniQueueServiceException("Message must be of type text or unicode")
        queue = self.queues[queueName]
        queue.insert(0, message)


class MiniQueueServiceEndpoint(xmlrpc.XMLRPC):

    allowNone = True

    def __init__(self, queueService):
        self.queueService = queueService

    def xmlrpc_createQueue(self, queueName):
        try:
            return self.queueService.createQueue(queueName)
        except MiniQueueServiceException, e:
            return xmlrpclib.Fault(-1, e.message)

    def xmlrpc_deleteQueue(self, queueName):
        try:
            return self.queueService.deleteQueue(queueName)
        except MiniQueueServiceException, e:
            return xmlrpclib.Fault(-1, e.message)

    def xmlrpc_listQueues(self):
        try:
            return self.queueService.listQueues()
        except MiniQueueServiceException, e:
            return xmlrpclib.Fault(-1, e.message)

    def xmlrpc_receiveMessage(self, queueName):
        try:
            return self.queueService.receiveMessage(queueName)
        except MiniQueueServiceException, e:
            return xmlrpclib.Fault(-1, e.message)

    def xmlrpc_sendMessage(self, queueName, message):
        try:
            return self.queueService.sendMessage(queueName, message)
        except MiniQueueServiceException, e:
            return xmlrpclib.Fault(-1, e.message)


def main():

    import sys

    from twisted.internet import reactor
    from twisted.web import resource, server
    from twisted.python import usage

    class Options(usage.Options):
        optFlags = [["debug", "d", "Debug mode (verbose)"]]
        optParameters = [["port", "p", 9090, "The port to bind to", int]]

    config = Options()
    
    try:
        config.parseOptions()
    except usage.UsageError, errortext:
        print '%s: %s' % (sys.argv[0], errortext)
        print '%s: Try --help for usage details.' % (sys.argv[0])

    print "Starting MQS service on http://localhost:%d/MiniQueueService" % (config['port'])

    root = resource.Resource()
    root.putChild('MiniQueueService', MiniQueueServiceEndpoint(MiniQueueService()))
    reactor.listenTCP(config['port'], server.Site(root))
    reactor.run()


if __name__ == '__main__':
    main()
